plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.firebase.crashlytics'
    id 'com.google.gms.google-services'
}

android {
    compileSdk 35

    defaultConfig {
        applicationId "com.jotangi.nantoupass"
        minSdk 26
        targetSdk 35
        versionCode 1
        versionName "1.0.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "arm64-v8a"
        }

        packagingOptions {
            jniLibs {
                useLegacyPackaging = true
            }
        }
    }

    viewBinding {
        enabled = true
    }
    buildFeatures {
        buildConfig = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    namespace 'com.jotangi.nantoupass'
    applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date().format("MMdd", TimeZone.getTimeZone("GMT+08"))
            outputFileName = "NanTouPass_${variant.buildType.name}_${date}_v${versionName}.${versionCode}.apk"
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // navigation
    def nva_version = "2.5.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nva_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nva_version"

    def mvvm_version = "2.5.0"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$mvvm_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$mvvm_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$mvvm_version"

    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.3'

    // banner
    implementation 'io.github.youth5201314:banner:2.2.2'
    implementation 'com.squareup.picasso:picasso:2.4.0'

    // web url image loader
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.2'


    // 掃描 QRcode
    implementation 'com.google.zxing:core:3.5.3'

    //掃描 QRcode - original
//    implementation 'com.journeyapps:zxing-android-embedded:3.6.0'
//    implementation 'com.google.android.gms:play-services-vision:20.1.3'

    //下拉 swipeRefreshLayout
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    //版本檢查
    implementation 'com.google.android.play:asset-delivery:2.2.2'
    implementation 'com.google.android.play:feature-delivery:2.1.0'
    implementation 'com.google.android.play:review:2.0.1'
    implementation 'com.google.android.play:app-update:2.1.0'

    implementation 'androidx.camera:camera-core:1.5.0'
    implementation 'androidx.camera:camera-camera2:1.5.0'
    implementation 'androidx.camera:camera-lifecycle:1.5.0'
    implementation 'androidx.camera:camera-view:1.5.0'
    // CameraX View

    // implementation 'com.google.android.play:app-update-ktx:2.0.1'
    // 顯示網址圖片
    implementation "io.coil-kt:coil:1.4.0"

    // map
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    implementation platform('com.google.firebase:firebase-bom:32.3.1')
    // Use the latest version of the Firebase BoM

    // Firebase Remote Config
    implementation 'com.google.firebase:firebase-config-ktx:21.2.0'
    // Firebase Crashlytics
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.4.1'

    // Optional: Firebase Analytics (required for some services like Crashlytics)
    implementation 'com.google.firebase:firebase-analytics-ktx:20.3.0'

    implementation 'com.google.firebase:firebase-messaging-ktx'

    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    // Tappay SDK
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
}
apply plugin: 'com.google.gms.google-services'
import java.util.zip.ZipFile

def PAGE_SIZE = 16 * 1024

task checkSoAlignment {
    group = "verification"
    description = "檢查 APK 中所有 .so 是否符合 16 KB page size 對齊"

    doLast {
        android.applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def apkPath = output.outputFile?.absolutePath
                if (!apkPath || !file(apkPath).exists()) {
                    println "APK not found: $apkPath"
                    return
                }

                println "\nScanning APK: $apkPath"

                // 1. 解壓 APK 到臨時資料夾
                def tempDir = new File(buildDir, "tempSoCheck/${variant.name}")
                tempDir.mkdirs()
                copy {
                    from zipTree(apkPath)
                    into tempDir
                    include 'lib/**/*.so'
                }

                // 2. 找到所有 .so 文件
                def soFiles = fileTree(tempDir).matching { include '**/*.so' }

                soFiles.each { soFile ->
                    println "Checking: ${soFile.absolutePath}"

                    // 3. 執行 readelf/greadelf 檢查 LOAD segment
                    def cmd = ["readelf", "-l", soFile.absolutePath]
                    if (System.properties['os.name'].toLowerCase().contains('mac')) {
                        cmd[0] = "greadelf" // macOS Homebrew binutils
                    }

                    try {
                        def process = cmd.execute()
                        process.waitFor()

                        process.in.text.eachLine { line ->
                            if (line.trim().startsWith("LOAD")) {
                                def tokens = line.trim().split(/\s+/)
                                def offsetHex = tokens[1]
                                def offset = Integer.parseInt(offsetHex.replace("0x",""), 16)
                                if (offset % PAGE_SIZE != 0) {
                                    println "⚠️  ${soFile.name} -> LOAD offset 0x${Integer.toHexString(offset)} not aligned to 16 KB"
                                }
                            }
                        }
                    } catch (Exception e) {
                        println "Error checking ${soFile.name}: ${e.message}"
                    }
                }

                println "\nScan completed for variant: ${variant.name}"
            }
        }
    }
}
